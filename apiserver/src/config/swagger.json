{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"UUID": {
				"type": "string",
				"format": "uuid",
				"description": "Stringified UUIDv4.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122)",
				"pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
			},
			"Pick_User.id_": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/UUID"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"UserIdDTO": {
				"$ref": "#/components/schemas/Pick_User.id_"
			},
			"Error": {
				"properties": {
					"name": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"stack": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_User.Exclude_keyofUser.id-or-friends-or-createdDate__": {
				"properties": {
					"email": {
						"type": "string",
						"default": ""
					},
					"displayName": {
						"type": "string",
						"default": ""
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_User.id-or-friends-or-createdDate_": {
				"$ref": "#/components/schemas/Pick_User.Exclude_keyofUser.id-or-friends-or-createdDate__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateUserDTO": {
				"$ref": "#/components/schemas/Omit_User.id-or-friends-or-createdDate_"
			},
			"Pick_User.displayName-or-email_": {
				"properties": {
					"email": {
						"type": "string",
						"default": ""
					},
					"displayName": {
						"type": "string",
						"default": ""
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"UserDTO": {
				"$ref": "#/components/schemas/Pick_User.displayName-or-email_"
			}
		},
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "Giftlist API",
		"version": "1.0.0",
		"license": {
			"name": "MIT"
		},
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/users": {
			"put": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserIdDTO"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				},
				"description": "Create a new user during sign up. Even if users are authenticated and\ncreated by Auth0, we manage a user database to store preferences,\nfriends and much more.",
				"tags": [
					"User"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "data to create a user",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateUserDTO"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "the user",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/UserDTO"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Gets all user's data.",
				"tags": [
					"User"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": []
			}
		},
		"/users/{userId}": {
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Delete logged user.",
				"tags": [
					"User"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "the user",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserDTO"
								}
							}
						}
					}
				},
				"description": "Gets logged user's data.",
				"tags": [
					"User"
				],
				"security": [
					{
						"auth0": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}